# app_backend/apps/restaurants/views.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)

from rest_framework import generics, permissions, status
from rest_framework.views import APIView
from .models import Restaurant
from .serializers import RestaurantSerializer, RestaurantWriteSerializer
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
# üëá 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏ –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è menu
from menu.models import MenuCategory
from menu.serializers import MenuCategoryWithDishesSerializer
from rest_framework.decorators import api_view, permission_classes


# ------------------- –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï VIEWS (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) -------------------

class ApprovedRestaurantListView(generics.ListAPIView):
    queryset = Restaurant.objects.filter(is_approved=True)
    serializer_class = RestaurantSerializer

class RestaurantDetailView(generics.RetrieveAPIView):
    queryset = Restaurant.objects.filter(is_approved=True)
    serializer_class = RestaurantSerializer

class MyRestaurantView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    def get_object(self):
        return get_object_or_404(Restaurant, owner=self.request.user)
    def get_serializer_class(self):
        if self.request.method == 'GET':
            return RestaurantSerializer
        return RestaurantWriteSerializer

class RestaurantCreateView(generics.CreateAPIView):
    queryset = Restaurant.objects.all()
    serializer_class = RestaurantWriteSerializer
    permission_classes = [IsAdminUser]
    def perform_create(self, serializer):
        serializer.save()

class ToggleActiveView(APIView):
    permission_classes = [IsAuthenticated]
    def post(self, request, *args, **kwargs):
        restaurant = get_object_or_404(Restaurant, owner=request.user)
        new_status = request.data.get('is_active')
        if new_status is None:
            return Response({"error": "–ü–æ–ª–µ is_active –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ."}, status=status.HTTP_400_BAD_REQUEST)
        if new_status is True and (not restaurant.address or not restaurant.latitude):
             return Response({"error": "–ß—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ."}, status=status.HTTP_400_BAD_REQUEST)
        restaurant.is_active = new_status
        restaurant.save()
        serializer = RestaurantSerializer(restaurant)
        return Response(serializer.data, status=status.HTTP_200_OK)


# --- üëáüëáüëá –í–û–¢ –ù–û–í–´–ô VIEW –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ú–ï–ù–Æ üëáüëáüëá ---

@api_view(["GET"])
@permission_classes([IsAuthenticated])
def restaurant_menu_view(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    """
    # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    restaurant = get_object_or_404(Restaurant, owner=request.user)
    
    # –¢–µ–ø–µ—Ä—å –º—ã –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü–†–ê–í–ò–õ–¨–ù–û - –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    # Django –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º
    # —á–µ—Ä–µ–∑ –ø–æ–ª–µ ManyToManyField, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ä–∞–Ω–µ–µ.
    categories = restaurant.categories.prefetch_related('dishes').all()
    
    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä MenuCategorySerializer —Ç–µ–ø–µ—Ä—å —Å–º–æ–∂–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    # –ø–æ–¥—Ç—è–Ω—É—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å–≤—è–∑–∞–Ω—ã —á–µ—Ä–µ–∑ related_name="dishes"
    serializer = MenuCategoryWithDishesSerializer(
        categories, 
        many=True, 
        context={'request': request, 'restaurant_id': restaurant.id}
    )
    
    return Response(serializer.data)
