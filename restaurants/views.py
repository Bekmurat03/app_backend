from rest_framework import generics, status, filters # üëà 1. –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ filters –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
from rest_framework.views import APIView
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from rest_framework.response import Response
from django.shortcuts import get_object_or_404

from .models import Restaurant
from .serializers import RestaurantSerializer, RestaurantWriteSerializer
from menu.serializers import MenuCategoryWithDishesSerializer
from .permissions import IsRestaurantOwner


class ApprovedRestaurantListView(generics.ListAPIView):
    """
    –û—Ç–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –±–ª—é–¥.
    """
    serializer_class = RestaurantSerializer
    
    # üëá 2. –î–û–ë–ê–í–õ–Ø–ï–ú –§–ò–õ–¨–¢–†–´ –î–õ–Ø –ü–û–ò–°–ö–ê
    filter_backends = [filters.SearchFilter]
    # –ü–æ –∫–∞–∫–∏–º –ø–æ–ª—è–º –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å: –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º –±–ª—é–¥.
    search_fields = ['name', 'dishes__name']

    def get_queryset(self):
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Å—Ç–∞–µ—Ç—Å—è, —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        return Restaurant.objects.filter(is_approved=True, is_active=True).prefetch_related(
            'categories', 'tariffs'
        )


class RestaurantDetailView(generics.RetrieveAPIView):
    """
    –û—Ç–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ.
    """
    serializer_class = RestaurantSerializer
    queryset = Restaurant.objects.filter(is_approved=True).prefetch_related('categories', 'tariffs')


class MyRestaurantView(generics.RetrieveUpdateAPIView):
    """
    –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–æ–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.
    """
    permission_classes = [IsAuthenticated, IsRestaurantOwner]
    queryset = Restaurant.objects.prefetch_related('categories', 'tariffs').all()

    def get_object(self):
        obj = get_object_or_404(self.get_queryset(), owner=self.request.user)
        self.check_object_permissions(self.request, obj)
        return obj

    def get_serializer_class(self):
        if self.request.method == 'GET':
            return RestaurantSerializer
        return RestaurantWriteSerializer


class ToggleActiveView(APIView):
    """
    –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤.
    """
    permission_classes = [IsAuthenticated, IsRestaurantOwner]

    def post(self, request, *args, **kwargs):
        restaurant = get_object_or_404(Restaurant, owner=request.user)
        self.check_object_permissions(request, restaurant)

        new_status = request.data.get('is_active')
        if new_status is None:
            return Response({"error": "–ü–æ–ª–µ is_active –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ."}, status=status.HTTP_400_BAD_REQUEST)

        if new_status is True and (not restaurant.address or not restaurant.latitude):
             return Response({"error": "–ß—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ."}, status=status.HTTP_400_BAD_REQUEST)

        restaurant.is_active = new_status
        restaurant.save(update_fields=['is_active'])
        serializer = RestaurantSerializer(restaurant)
        return Response(serializer.data, status=status.HTTP_200_OK)


class RestaurantMenuView(generics.ListAPIView):
    """
    –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    """
    serializer_class = MenuCategoryWithDishesSerializer
    permission_classes = [IsAuthenticated, IsRestaurantOwner]

    def get_queryset(self):
        restaurant = get_object_or_404(Restaurant, owner=self.request.user)
        self.check_object_permissions(self.request, restaurant)
        return restaurant.categories.prefetch_related('dishes').all()

    def get_serializer_context(self):
        context = super().get_serializer_context()
        restaurant = get_object_or_404(Restaurant, owner=self.request.user)
        context["restaurant_id"] = restaurant.id
        return context


class RestaurantCreateView(generics.CreateAPIView):
    queryset = Restaurant.objects.all()
    serializer_class = RestaurantWriteSerializer
    permission_classes = [IsAdminUser]

    def perform_create(self, serializer):
        serializer.save()