# app_backend/apps/restaurants/serializers.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

from rest_framework import serializers
from .models import Restaurant, DeliveryTariff # üëà 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Ç–∞—Ä–∏—Ñ–æ–≤
from menu.serializers import MenuCategorySerializer
from menu.models import MenuCategory

# üëá 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –º–æ–¥–µ–ª–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
class DeliveryTariffSerializer(serializers.ModelSerializer):
    class Meta:
        model = DeliveryTariff
        # –£–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –∏–∑ —Ç–∞—Ä–∏—Ñ–∞ –º—ã —Ö–æ—Ç–∏–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        fields = ('name', 'start_time', 'end_time', 'base_fee', 'fee_per_km')


# –≠—Ç–æ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è (–∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ)
class RestaurantSerializer(serializers.ModelSerializer):
    categories = MenuCategorySerializer(many=True, read_only=True)
    # üëá 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ 'tariffs'
    # –û–Ω–æ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    tariffs = DeliveryTariffSerializer(many=True, read_only=True)

    class Meta:
        model = Restaurant
        fields = [
            "id",
            "name",
            "description",
            "logo",
            "banner",
            "address",
            "is_approved",
            "categories",
            "latitude", "longitude",
            "tariffs",
            "is_active",
            "phone_number" # üëà 4. –ù–µ –∑–∞–±—ã–≤–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ —Å–ø–∏—Å–æ–∫
        ]


# –≠—Ç–æ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ (–æ–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π,
# —Ç–∞–∫ –∫–∞–∫ —Ç–∞—Ä–∏—Ñ—ã —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –∞–¥–º–∏–Ω–∫–∏)
class RestaurantWriteSerializer(serializers.ModelSerializer):
    categories = serializers.PrimaryKeyRelatedField(
        queryset=MenuCategory.objects.all(),
        many=True,
        required=False,
    )

    class Meta:
        model = Restaurant
        fields = [
            "id",
            "name",
            "description",
            "logo",
            "banner",
            "address",
            "is_approved",
            "categories",
            # "is_active", # –∏ —ç—Ç–æ–≥–æ —Ç–æ–∂–µ
            "latitude", "longitude", "phone_number",
        ]

    def create(self, validated_data):
        categories = validated_data.pop("categories", [])
        restaurant = Restaurant.objects.create(**validated_data)
        restaurant.categories.set(categories)
        return restaurant

    def update(self, instance, validated_data):
        categories = validated_data.pop("categories", None)
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()

        if categories is not None:
            instance.categories.set(categories)

        return instance