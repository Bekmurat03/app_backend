# app_backend/apps/restaurants/serializers.py (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

from rest_framework import serializers
from django.db.models import Avg # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
from .models import Restaurant, DeliveryTariff
from menu.serializers import MenuCategorySerializer
from menu.models import MenuCategory


class DeliveryTariffSerializer(serializers.ModelSerializer):
    class Meta:
        model = DeliveryTariff
        fields = ('name', 'start_time', 'end_time', 'base_fee', 'fee_per_km')


class RestaurantSerializer(serializers.ModelSerializer):
    categories = MenuCategorySerializer(many=True, read_only=True)
    tariffs = DeliveryTariffSerializer(many=True, read_only=True)

    # üëá 4. –ü–†–ò–ú–ï–† –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –ü–û–õ–Ø: –í—ã—á–∏—Å–ª—è–µ–º—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    # –≠—Ç–æ –ø–æ–ª–µ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î, –∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è "–Ω–∞ –ª–µ—Ç—É".
    # –î–ª—è –µ–≥–æ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–∞ –º–æ–¥–µ–ª—å Review, –∫–æ—Ç–æ—Ä–∞—è —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å.
    rating = serializers.SerializerMethodField()

    class Meta:
        model = Restaurant
        fields = [
            "id",
            "name",
            "description",
            "logo",
            "banner",
            "address",
            "is_approved",
            "categories",
            "latitude", "longitude",
            "tariffs",
            "is_active",
            "phone_number",
            "rating", # üëà –î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ —Å–ø–∏—Å–æ–∫
        ]

    def get_rating(self, obj):
        # `obj` - —ç—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —ç—Ç–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –æ—Ç–∑—ã–≤, –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥.
        # –ú–µ—Ç–æ–¥ aggregate –Ω–∞–º–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ, —á–µ–º –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏ —Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤ Python.
        avg_rating = obj.orders.filter(review__isnull=False).aggregate(Avg('review__rating'))['review__rating__avg']
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0, –µ—Å–ª–∏ –æ—Ç–∑—ã–≤–æ–≤ –µ—â–µ –Ω–µ—Ç.
        return round(avg_rating, 1) if avg_rating else 0.0


# –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω.
class RestaurantWriteSerializer(serializers.ModelSerializer):
    categories = serializers.PrimaryKeyRelatedField(
        queryset=MenuCategory.objects.all(),
        many=True,
        required=False,
    )

    class Meta:
        model = Restaurant
        # –ü–æ–ª—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–µ –º–µ–Ω—è–µ–º
        fields = [
            "id", "name", "description", "logo", "banner",
            "address", "is_approved", "categories",
            "latitude", "longitude", "phone_number",
        ]

    def create(self, validated_data):
        categories = validated_data.pop("categories", [])
        restaurant = Restaurant.objects.create(**validated_data)
        restaurant.categories.set(categories)
        return restaurant

    def update(self, instance, validated_data):
        categories = validated_data.pop("categories", None)
        # –≠—Ç–æ—Ç —Ü–∏–∫–ª - —Ö–æ—Ä–æ—à–∏–π —Å–ø–æ—Å–æ–± –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, —á—Ç–æ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()

        if categories is not None:
            instance.categories.set(categories)

        return instance