from rest_framework import generics, status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django.db import transaction
import uuid

# –ù–∞—à–∏ –º–æ–¥–µ–ª–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
from .models import SavedUserCard
from orders.models import Order, OrderItem
from core.models import Address
from promos.models import PromoCode
from .services import PayLinkService 

# –ù–∞—à–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
from .serializers import SavedUserCardSerializer
# üëá –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞
from orders.serializers import CreateOrderSerializer 


class CreateOrderAndPaymentView(APIView):
    """
    –ì–ª–∞–≤–Ω–∞—è view –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    –û–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.
    """
    permission_classes = [IsAuthenticated]

    @transaction.atomic
    def post(self, request, *args, **kwargs):
        # üëá –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ò–ú–Ø –ö–õ–ê–°–°–ê –ó–î–ï–°–¨
        serializer = CreateOrderSerializer(data=request.data, context={'request': request})
        if not serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        # –í–∞—à CreateOrderSerializer —É–∂–µ –¥–µ–ª–∞–µ—Ç –≤—Å—é —Ä–∞–±–æ—Ç—É –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞
        # –∏ —Ä–∞—Å—á–µ—Ç—É —Å—É–º–º—ã, –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ –º–µ—Ç–æ–¥ save().
        order = serializer.save()

        # --- –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ PayLink ---
        try:
            paylink_service = PayLinkService()
            payment_url = paylink_service.create_payment(
                amount=float(order.total_price),
                order_id=str(order.id),
                description=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}",
                # enable_apple_pay –∏ enable_google_pay —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞
            )
            return Response({"payment_url": payment_url}, status=status.HTTP_201_CREATED)
        except Exception as e:
            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            transaction.set_rollback(True)
            return Response({"error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class SavedCardListView(generics.ListAPIView):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    serializer_class = SavedUserCardSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return SavedUserCard.objects.filter(user=self.request.user)


class PayLinkWebhookView(APIView):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç PayLink –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã.
    """
    def post(self, request, *args, **kwargs):
        # –í–ê–ñ–ù–û: –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç PayLink
        event_type = request.data.get("type")
        data = request.data.get("data")

        if event_type == "payment.success":
            order_id = data.get("order_id")
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–π –ë–î –∏ –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
            try:
                order = Order.objects.get(id=order_id)
                order.status = 'PAID' # –∏–ª–∏ –≤–∞—à —Å—Ç–∞—Ç—É—Å '–û–ø–ª–∞—á–µ–Ω'
                order.save()
            except Order.DoesNotExist:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

        elif event_type == "card.tokenized":
            user_id = data.get("user_id")
            card_token = data.get("token")
            card_mask = data.get("mask")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id and card_token and card_mask:
                SavedUserCard.objects.create(
                    user_id=user_id,
                    card_token=card_token,
                    card_mask=card_mask
                )

        return Response(status=status.HTTP_200_OK)