# app_backend/apps/core/serializers.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
import uuid
from rest_framework import serializers
from django.contrib.auth import get_user_model
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from courier.serializers import CourierProfileSerializer
from .models import User, Address

User = get_user_model()

# --- üëáüëáüëá –í–û–¢ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ô –°–ï–†–ò–ê–õ–ò–ó–ê–¢–û–† üëáüëáüëá ---
class UserSerializer(serializers.ModelSerializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ—Ñ–∏–ª—å –∫—É—Ä—å–µ—Ä–∞).
    """
    courier_profile = CourierProfileSerializer(read_only=True)

    class Meta:
        model = User
        fields = ('id', 'first_name', 'last_name', 'phone', 'role', 'is_push_enabled', 'courier_profile')


class RegisterSerializer(serializers.ModelSerializer):
    name = serializers.CharField(write_only=True, required=True)

    class Meta:
        model = User
        fields = ['id', 'name', 'phone', 'password', 'role']
        extra_kwargs = {
            'password': {'write_only': True},
            'phone': {'required': True},
            'role': {'required': False, 'default': 'client'}
        }

    def create(self, validated_data):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π username, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ –º–æ–¥–µ–ª–∏ Django
        username = str(uuid.uuid4())
        user = User.objects.create_user(
            username=username,
            password=validated_data['password'],
            phone=validated_data['phone'],
            first_name=validated_data['name'],
            role=validated_data.get('role'),
        )
        return user


class PhoneTokenObtainPairSerializer(TokenObtainPairSerializer):
    username_field = 'phone'

    def validate(self, attrs):
        phone = attrs.get("phone")
        password = attrs.get("password")
        user = User.objects.filter(phone=phone).first()

        if user and user.check_password(password):
            token = self.get_token(user)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º UserSerializer, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            user_data = UserSerializer(user).data
            return {
                'refresh': str(token),
                'access': str(token.access_token),
                'user': user_data
            }
        
        raise serializers.ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")


class ChangePasswordSerializer(serializers.Serializer):
    old_password = serializers.CharField(required=True, write_only=True)
    new_password = serializers.CharField(required=True, write_only=True)

    def validate_old_password(self, value):
        user = self.context['request'].user
        if not user.check_password(value):
            raise serializers.ValidationError("–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ.")
        return value

    def validate(self, data):
        if data['new_password'] == data['old_password']:
            raise serializers.ValidationError("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ.")
        return data

    def save(self, **kwargs):
        password = self.validated_data['new_password']
        user = self.context['request'].user
        user.set_password(password)
        user.save()
        return user


class AddressSerializer(serializers.ModelSerializer):
    class Meta:
        model = Address
        fields = ('id', 'user', 'title', 'full_address', 'latitude', 'longitude', 'is_primary')
        read_only_fields = ('user',)