# app_backend/apps/core/views.py (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

from rest_framework import generics, status, viewsets, permissions
from .models import Address, User
from .serializers import (
    AddressSerializer,
    ChangePasswordSerializer,
    PhoneTokenObtainPairSerializer,
    RegisterSerializer,
    UserSerializer
)
from rest_framework_simplejwt.views import TokenObtainPairView
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
import random
from .models import PhoneOTP, User
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .permissions import IsOwner
class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = RegisterSerializer
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ–º (–Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
    permission_classes = [permissions.AllowAny]


class PhoneLoginView(TokenObtainPairView):
    serializer_class = PhoneTokenObtainPairSerializer


class UserDetailView(generics.RetrieveUpdateAPIView):
    """
    –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    serializer_class = UserSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        # üëá –£–õ–£–ß–®–ï–ù–ò–ï 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –∑–¥–µ—Å—å.
        # –ú—ã –ø–æ–ª—É—á–∞–µ–º request.user, –Ω–æ —á—Ç–æ–±—ã —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
        # –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å .select_related().
        user = User.objects.select_related('courier_profile').get(id=self.request.user.id)
        return user


class ChangePasswordView(generics.UpdateAPIView):
    serializer_class = ChangePasswordSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        return self.request.user

    def update(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response({"detail": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω."}, status=status.HTTP_200_OK)


class AddressViewSet(viewsets.ModelViewSet):
    """
    API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏ (–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞, —Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ).
    """
    serializer_class = AddressSerializer
    permission_classes = [permissions.IsAuthenticated, IsOwner]

    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        return Address.objects.filter(user=self.request.user).order_by('-id')

    # üëá –í–û–¢ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï, –ö–û–¢–û–†–û–ï –†–ï–®–ê–ï–¢ –û–®–ò–ë–ö–£ 500
    def perform_create(self, serializer):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        serializer.save(user=self.request.user)


class TogglePushNotificationView(APIView):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    permission_classes = [IsAuthenticated]

    def post(self, request):
        user = request.user
        user.is_push_enabled = not user.is_push_enabled
        user.save(update_fields=['is_push_enabled'])
        return Response({
            "is_push_enabled": user.is_push_enabled
        }, status=status.HTTP_200_OK)
class SendOTPView(APIView):
    """
    View –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    def post(self, request, *args, **kwargs):
        phone_number = request.data.get('phone')

        if not phone_number:
            return Response({"error": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}, status=status.HTTP_400_BAD_REQUEST)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        otp_code = str(random.randint(1000, 9999))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        PhoneOTP.objects.update_or_create(
            phone=phone_number,
            defaults={'otp': otp_code}
        )

        # !!! –í–ê–ñ–ù–û: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS-—Å–µ—Ä–≤–∏—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, Twilio)
        # –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω.
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å.
        print(f"--- OTP –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}: {otp_code} ---")

        return Response({"success": "–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"}, status=status.HTTP_200_OK)


class VerifyOTPView(APIView):
    """
    View –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OTP –∫–æ–¥–∞ –∏ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    def post(self, request, *args, **kwargs):
        phone_number = request.data.get('phone')
        otp_code = request.data.get('otp')

        if not phone_number or not otp_code:
            return Response({"error": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ OTP –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}, status=status.HTTP_400_BAD_REQUEST)

        try:
            otp_entry = PhoneOTP.objects.get(phone=phone_number)
        except PhoneOTP.DoesNotExist:
            return Response({"error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–¥"}, status=status.HTTP_400_BAD_REQUEST)

        if otp_entry.is_expired():
            return Response({"error": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫"}, status=status.HTTP_400_BAD_REQUEST)
        
        if otp_entry.otp != otp_code:
            return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}, status=status.HTTP_400_BAD_REQUEST)

        # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π. –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = User.objects.get_or_create(phone=phone_number)

        if created:
            # –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            # user.name = "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            user.save()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        refresh = RefreshToken.for_user(user)
        
        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π OTP
        otp_entry.delete()

        return Response({
            'refresh': str(refresh),
            'access': str(refresh.access_token),
            'user': UserSerializer(user).data # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }, status=status.HTTP_200_OK)
