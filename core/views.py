from core.models import Address
from rest_framework import generics, status, viewsets, permissions
from .serializers import AddressSerializer, ChangePasswordSerializer, PhoneTokenObtainPairSerializer, RegisterSerializer, UserDetailSerializer, UserUpdateSerializer
from django.contrib.auth import get_user_model
from rest_framework_simplejwt.views import TokenObtainPairView
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.decorators import api_view, permission_classes
User = get_user_model()

class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = RegisterSerializer

class PhoneLoginView(TokenObtainPairView):
    serializer_class = PhoneTokenObtainPairSerializer
class UserDetailView(generics.RetrieveUpdateAPIView):
    """
    –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    serializer_class = UserUpdateSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return self.request.user
    def get_serializer_class(self):
        if self.request.method in ['PUT', 'PATCH']:
            return UserUpdateSerializer
        return UserDetailSerializer
class ChangePasswordView(generics.UpdateAPIView):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è.
    """
    serializer_class = ChangePasswordSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        return self.request.user

    def update(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response({"detail": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω."}, status=status.HTTP_200_OK)
class AddressViewSet(viewsets.ModelViewSet):
    """
    API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞–º–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    serializer_class = AddressSerializer
    permission_classes = [permissions.IsAuthenticated] # –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö

    def get_queryset(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        return Address.objects.filter(user=self.request.user).order_by('-is_primary', 'title')

    def perform_create(self, serializer):
        """
        –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–π –∞–¥—Ä–µ—Å –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å, –¥–µ–ª–∞–µ–º –µ–≥–æ –æ—Å–Ω–æ–≤–Ω—ã–º
        is_first_address = not Address.objects.filter(user=self.request.user).exists()
        serializer.save(user=self.request.user, is_primary=is_first_address)
class TogglePushView(APIView):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    permission_classes = [IsAuthenticated]

    def post(self, request):
        user = request.user
        user.notifications_enabled = not user.notifications_enabled
        user.save()
        return Response({
            "notifications_enabled": user.notifications_enabled
        })
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def toggle_push_notifications(request):
    user = request.user
    user.notifications_enabled = not user.notifications_enabled  # üëà –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º
    user.save()
    return Response({"notifications_enabled": user.notifications_enabled})