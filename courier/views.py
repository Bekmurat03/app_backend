# courier/views.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
from payments.services import PayLinkService
from rest_framework import generics, status, views
# üëá –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∏–º–ø–æ—Ä—Ç 'permissions'
from rest_framework import permissions
from rest_framework.response import Response
from rest_framework.exceptions import NotFound
from django.shortcuts import get_object_or_404
from django.db.models import Sum, Count
from django.utils import timezone
from rest_framework.views import APIView
from django.db import transaction
import logging
from orders.models import Order
from .models import CourierProfile
from .serializers import CourierProfileSerializer, CourierOrderSerializer, OrderTrackingSerializer
from .permissions import IsCourier, IsOrderCourier
from . import services

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –∫—É—Ä—å–µ—Ä–∞ ---
logger = logging.getLogger(__name__)

class DocumentUploadView(views.APIView):
    """–î–ª—è –∫—É—Ä—å–µ—Ä–∞: –∑–∞–≥—Ä—É–∑–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    permission_classes = [IsCourier]

    def post(self, request, *args, **kwargs):
        profile, created = CourierProfile.objects.get_or_create(user=request.user)
        # partial=True –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        serializer = CourierProfileSerializer(instance=profile, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save(verification_status='on_review')
            return Response({"success": "–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."}, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class ToggleOnlineStatusView(views.APIView):
    """–î–ª—è –∫—É—Ä—å–µ—Ä–∞: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω."""
    permission_classes = [IsCourier]

    def post(self, request, *args, **kwargs):
        profile, created = CourierProfile.objects.get_or_create(user=request.user)
        profile.is_online = not profile.is_online
        profile.save(update_fields=['is_online'])
        return Response({'is_online': profile.is_online}, status=status.HTTP_200_OK)


class UpdateCourierLocationView(views.APIView):
    """–î–ª—è –∫—É—Ä—å–µ—Ä–∞: –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ."""
    permission_classes = [IsCourier]
    
    def post(self, request, *args, **kwargs):
        latitude = request.data.get('latitude')
        longitude = request.data.get('longitude')
        if latitude is not None and longitude is not None:
            request.user.latitude = latitude
            request.user.longitude = longitude
            request.user.save(update_fields=['latitude', 'longitude'])
            return Response({'status': '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'}, status=status.HTTP_200_OK)
        return Response({'error': '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'}, status=status.HTTP_400_BAD_REQUEST)


# --- –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ ---

class AvailableOrdersView(generics.ListAPIView):
    """–î–ª—è –∫—É—Ä—å–µ—Ä–∞: —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—ã–¥–∞—á–µ."""
    serializer_class = CourierOrderSerializer
    permission_classes = [IsCourier]

    def get_queryset(self):
        return Order.objects.filter(status='ready_for_pickup', courier__isnull=True).select_related(
            'restaurant'
        ).prefetch_related(
            'items__menu'
        ).order_by('-created_at')


class CourierAcceptOrderView(views.APIView):
    """–î–ª—è –∫—É—Ä—å–µ—Ä–∞: "–≤–∑—è—Ç—å" –∑–∞–∫–∞–∑."""
    permission_classes = [IsCourier]

    def post(self, request, order_id):
        try:
            order = services.accept_order_for_courier(order_id, request.user)
            serializer = CourierOrderSerializer(order)
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Order.DoesNotExist:
            return Response({"error": "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)


class CurrentOrderView(generics.RetrieveAPIView):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä–∞."""
    serializer_class = CourierOrderSerializer
    permission_classes = [IsCourier]

    def get_object(self):
        order = Order.objects.select_related('restaurant').prefetch_related('items__menu').filter(
            courier=self.request.user, status='on_the_way'
        ).first()
        if not order:
            raise NotFound("–ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return order


class UpdateDeliveryStatusView(APIView):
    """
    –î–ª—è –∫—É—Ä—å–µ—Ä–∞: –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑ –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∏–ª.
    –ü—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–ø–ª–∏—Ç–æ–≤–∞–Ω–∏–µ.
    """
    permission_classes = [permissions.IsAuthenticated, IsCourier, IsOrderCourier]

    def post(self, request, order_id):
        order = get_object_or_404(Order, id=order_id)
        self.check_object_permissions(request, order)

        action = request.data.get('action')

        if action == 'picked_up' and order.status == 'ready_for_pickup':
            order.status = 'on_the_way'
            order.save(update_fields=['status'])
            return Response({"success": "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: '–í –ø—É—Ç–∏'."}, status=status.HTTP_200_OK)

        elif action == 'delivered' and order.status == 'on_the_way':
            try:
                with transaction.atomic():
                    order.status = 'delivered'
                    order.save(update_fields=['status'])
                    
                    if order.authorization_id:
                        payment_service = PayLinkService()
                        payment_service.capture_and_split_payment(order)

                return Response({"success": "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –û–ø–ª–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–∞."}, status=status.HTTP_200_OK)
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order.id}: {str(e)}")
                return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ –∏ —Å–ø–∏—Å–∞—Ç—å –æ–ø–ª–∞—Ç—É."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        return Response({"error": f"–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '{action}' –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{order.get_status_display()}'."}, status=status.HTTP_400_BAD_REQUEST)


class CourierOrderHistoryView(generics.ListAPIView):
    """–î–ª—è –∫—É—Ä—å–µ—Ä–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –µ–≥–æ –∑–∞–∫–∞–∑–æ–≤."""
    serializer_class = CourierOrderSerializer
    permission_classes = [IsCourier]

    def get_queryset(self):
        return Order.objects.filter(courier=self.request.user).select_related(
            'restaurant'
        ).prefetch_related('items__menu').order_by('-created_at')


class CourierStatsView(views.APIView):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞."""
    permission_classes = [IsCourier]

    def get(self, request, *args, **kwargs):
        # ... (–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        courier = request.user
        today = timezone.now().date()
        today_stats = Order.objects.filter(courier=courier, status='delivered', created_at__date=today).aggregate(
            earnings_today=Sum('delivery_fee'), orders_today=Count('id')
        )
        total_stats = Order.objects.filter(courier=courier, status='delivered').aggregate(
            earnings_total=Sum('delivery_fee'), orders_total=Count('id')
        )
        return Response({
            'earnings_today': today_stats.get('earnings_today') or 0,
            'orders_today': today_stats.get('orders_today') or 0,
            'earnings_total': total_stats.get('earnings_total') or 0,
            'orders_total': total_stats.get('orders_total') or 0,
        })


# --- VIEW –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê ---

class OrderTrackingView(generics.RetrieveAPIView):
    """–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞: –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    # –í–æ—Ç –∑–¥–µ—Å—å –±—ã–ª–∞ –æ—à–∏–±–∫–∞, —Ç–µ–ø–µ—Ä—å `permissions` –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    permission_classes = [permissions.IsAuthenticated]
    serializer_class = OrderTrackingSerializer
    queryset = Order.objects.select_related('courier', 'restaurant').all()

    def get_object(self):
        order = get_object_or_404(self.get_queryset(), id=self.kwargs['order_id'], user=self.request.user)
        return order