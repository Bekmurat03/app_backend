# promos/views.py (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
from rest_framework import generics, status, permissions
from rest_framework.views import APIView
from rest_framework.response import Response
from django.shortcuts import get_object_or_404

from .models import PromoBanner, PromoCode
from .serializers import PromoBannerSerializer, PromoCodeSerializer
from . import services # üëà 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å
from orders.models import Order
from orders.permissions import IsClientOwnerOfOrder # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∞ –∏–∑ orders app

class PromoBannerListView(generics.ListAPIView):
    queryset = PromoBanner.objects.filter(is_active=True)
    serializer_class = PromoBannerSerializer
    permission_classes = [permissions.AllowAny]


class ValidatePromoCodeView(APIView):
    """–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –≤–∞–ª–∏–¥–µ–Ω –ª–∏ –æ–Ω."""
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        code = request.data.get("code", "").strip()
        try:
            promo = PromoCode.objects.get(code__iexact=code)
            if not promo.is_valid():
                return Response({"error": "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"}, status=status.HTTP_400_BAD_REQUEST)

            serializer = PromoCodeSerializer(promo)
            return Response(serializer.data, status=status.HTTP_200_OK)
        except PromoCode.DoesNotExist:
            return Response({"error": "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_404_NOT_FOUND)


# üëá 2. –ù–û–í–´–ô VIEW –î–õ–Ø –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ü–†–û–ú–û–ö–û–î–ê
class ApplyPromoCodeView(APIView):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–∫–∞–∑—É.
    """
    permission_classes = [permissions.IsAuthenticated, IsClientOwnerOfOrder]

    def post(self, request, *args, **kwargs):
        code = request.data.get("code", "").strip()
        order_id = request.data.get("order_id")

        if not code or not order_id:
            return Response({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã code –∏ order_id."}, status=status.HTTP_400_BAD_REQUEST)

        try:
            order = get_object_or_404(Order, id=order_id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∑–∞–∫–∞–∑–∞
            self.check_object_permissions(request, order)
            
            # –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç –≤—Å—é —Å–ª–æ–∂–Ω—É—é —Ä–∞–±–æ—Ç—É
            updated_order, discount_amount = services.apply_promo_code_to_order(code, order)
            
            from orders.serializers import OrderSerializer # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
            return Response({
                'message': f'–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω! –°–∫–∏–¥–∫–∞: {discount_amount}',
                'order': OrderSerializer(updated_order).data
            }, status=status.HTTP_200_OK)

        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)