# promos/models.py (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
from django.db import models, transaction
from django.utils import timezone
from django.db.models import F # üëà 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º F-–≤—ã—Ä–∞–∂–µ–Ω–∏—è

class PromoBanner(models.Model):
    title = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    image = models.ImageField(upload_to='promos/')
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return self.title


class PromoCode(models.Model):
    code = models.CharField(max_length=50, unique=True)
    discount = models.DecimalField(max_digits=5, decimal_places=2, help_text="–ù–∞–ø—Ä–∏–º–µ—Ä: 10.0 = 10%")
    expires_at = models.DateTimeField(null=True, blank=True)
    max_uses = models.PositiveIntegerField(null=True, blank=True, help_text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
    used_count = models.PositiveIntegerField(default=0)

    def is_valid(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥."""
        if self.expires_at and timezone.now() > self.expires_at:
            return False
        if self.max_uses is not None and self.used_count >= self.max_uses:
            return False
        return True

    def apply(self):
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Å—Ä–µ–¥–µ.
        """
        # 2. üëá –ò–°–ü–û–õ–¨–ó–£–ï–ú F() –î–õ–Ø –ê–¢–û–ú–ê–†–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–∞–∂–µ –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        # —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        self.used_count = F('used_count') + 1
        self.save(update_fields=['used_count'])
        self.refresh_from_db() # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î

    def __str__(self):
        return self.code