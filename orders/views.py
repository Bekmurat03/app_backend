# orders/views.py
from rest_framework import generics, permissions, status
from .models import Order
from .serializers import OrderSerializer
from restaurants.models import Restaurant
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework.views import APIView
from django.shortcuts import get_object_or_404
from django.utils import timezone
from datetime import timedelta
import requests
import hashlib
from django.conf import settings
import base64
from payments.models import PaymentCard
class OrderListCreateView(generics.ListCreateAPIView):
    """ –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ. """
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Order.objects.filter(user=self.request.user).order_by('-created_at')

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class RestaurantOrdersView(generics.ListAPIView):
    """ –î–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∫ –Ω–µ–º—É –æ—Ç–Ω–æ—Å—è—Ç—Å—è. """
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        try:
            restaurants = Restaurant.objects.filter(owner=user)
            return Order.objects.filter(restaurant__in=restaurants).distinct().order_by('-created_at')
        except Restaurant.DoesNotExist:
            return Order.objects.none()

# üëáüëáüëá –î–û–ë–ê–í–¨–¢–ï/–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –≠–¢–ò –ö–õ–ê–°–°–´ üëáüëáüëá

class AcceptOrderView(APIView):
    """
    –î–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –∏ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏.
    """
    permission_classes = [IsAuthenticated]

    def post(self, request, order_id):
        restaurant = get_object_or_404(Restaurant, owner=request.user)
        order = get_object_or_404(Order, id=order_id, restaurant=restaurant)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        preparation_time_minutes = request.data.get('preparation_time')

        if not preparation_time_minutes:
            return Response({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏'}, status=status.HTTP_400_BAD_REQUEST)

        if order.status == 'pending':
            order.status = 'accepted'
            order.preparation_time = int(preparation_time_minutes)
            # üëáüëáüëá –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£ üëáüëáüëá
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
            order.estimated_delivery_time = timezone.now() + timedelta(minutes=int(preparation_time_minutes))
            order.save()
            serializer = OrderSerializer(order)
            return Response(serializer.data, status=status.HTTP_200_OK)
            
            # TODO: –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∑–∞–¥–∞—á–∞ –ø–æ –ø–æ–∏—Å–∫—É –∫—É—Ä—å–µ—Ä–∞
            # find_and_assign_courier_async(order.id)
            
            
        return Response({'error': '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å.'}, status=status.HTTP_400_BAD_REQUEST)

class RejectOrderView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, order_id):
        restaurant = get_object_or_404(Restaurant, owner=request.user)
        order = get_object_or_404(Order, id=order_id, restaurant=restaurant)

        if order.status == 'pending':
            order.status = 'cancelled'
            order.save()
            serializer = OrderSerializer(order)
            return Response(serializer.data, status=status.HTTP_200_OK)
        
          
        return Response({'error': '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.'}, status=status.HTTP_400_BAD_REQUEST)

class UpdateOrderStatusView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, order_id):
        restaurant = get_object_or_404(Restaurant, owner=request.user)
        order = get_object_or_404(Order, id=order_id, restaurant=restaurant)

        if order.status == 'accepted':
            order.status = 'preparing'
        elif order.status == 'preparing':
            order.status = 'ready_for_pickup'
            # üëáüëáüëá –í–û–¢ –ù–ê–®–ê –ó–ê–ì–õ–£–®–ö–ê üëáüëáüëá
            # TODO: –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # –≤—Å–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–º –∫—É—Ä—å–µ—Ä–∞–º –æ —Ç–æ–º, —á—Ç–æ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –≥–æ—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑.
            # find_available_couriers_and_notify(order)
            # üëÜüëÜüëÜ –ö–û–ù–ï–¶ –ó–ê–ì–õ–£–®–ö–ò üëÜüëÜüëÜ
        else:
            return Response({'error': f'–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å "{order.status}"'}, status=status.HTTP_400_BAD_REQUEST)

        order.save()
        serializer = OrderSerializer(order)
        return Response(serializer.data, status=status.HTTP_200_OK)
        
class OrderDetailView(generics.RetrieveAPIView):
    """
    –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞: –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
    """
    serializer_class = OrderSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã
        return Order.objects.filter(user=self.request.user)


class CancelOrderView(APIView):
    """
    –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑.
    """
    permission_classes = [IsAuthenticated]

    def post(self, request, order_id):
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        order = get_object_or_404(Order, id=order_id, user=request.user)

        # –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ "–í –æ–∂–∏–¥–∞–Ω–∏–∏"
        if order.status == 'pending':
            order.status = 'cancelled'
            order.save()
            return Response({'status': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω'}, status=status.HTTP_200_OK)

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ –¥—Ä—É–≥–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü—Ä–∏–Ω—è—Ç"), –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è
        return Response(
            {'error': '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.'},
            status=status.HTTP_400_BAD_REQUEST
        )


class CreatePaymentView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    # üëá 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º 'order_id' –Ω–∞ 'pk', —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—à–µ–º—É urls.py
    def post(self, request, order_id):
        card_id = request.data.get('card_id')
        try:
            order = get_object_or_404(Order, id=pk, user=request.user)
            amount = int(order.total_price * 100)

            payload = {
                "checkout": {
                    "transaction_type": "payment",
                    "order": {
                        "amount": amount,
                        "currency": "KZT",
                        "description": f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}"
                    },
                    "settings": {
                        "success_url": "jetfood://payment/success",
                        "failure_url": "jetfood://payment/failure"
                    }
                }
            }

            # --- üëáüëáüëá –í–û–¢ –í–ê–®–ê –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê üëáüëáüëá ---
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –∑–∞–ø—Ä–æ—Å
            if card_id:
                try:
                    card = PaymentCard.objects.get(id=card_id, user=request.user)
                    # –í–ê–ñ–ù–û: PayLink –æ–∂–∏–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –∫–∞—Ä—Ç—ã, –∞ –Ω–µ –Ω–∞—à ID
                    payload['checkout']['customer_card_id'] = card.card_token
                except PaymentCard.DoesNotExist:
                    return Response({'error': '–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'}, status=status.HTTP_400_BAD_REQUEST)
            # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

            credentials = f"{settings.PAYLINK_API_KEY}:{settings.PAYLINK_API_SECRET}"
            encoded_credentials = base64.b64encode(credentials.encode()).decode()

            headers = {
                "Authorization": f"Basic {encoded_credentials}",
                "Content-Type": "application/json",
                "Accept": "application/json",
                "X-API-Version": "2"
            }

            response = requests.post(
                "https://checkout.paylink.kz/ctp/api/checkouts",
                json=payload,
                headers=headers,
                timeout=10
            )

            print("üì¶ –û—Ç–≤–µ—Ç –æ—Ç PayLink:", response.status_code, response.text)

            if response.status_code == 201:
                checkout_url = response.json()['checkout']['redirect_url']
                payment_id = response.json().get('id')

                order.payment_id = payment_id
                order.save()

                return Response({"payment_url": checkout_url})
            else:
                return Response({"error": response.json()}, status=response.status_code)

        except Order.DoesNotExist:
            return Response({"error": "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:", e)
            return Response({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞."}, status=500)

# --- üëáüëáüëá –ù–û–í–´–ô VIEW –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –í–ï–ë–•–£–ö–ê –û–¢ PAYLINK üëáüëáüëá ---
class PayLinkWebhookView(APIView):
    permission_classes = [permissions.AllowAny]

    def post(self, request, *args, **kwargs):
        data = request.data
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ö—ç—à–∞ –∏–∑ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        payment_status = data.get('status')
        order_id = data.get('order_id')

        try:
            order = Order.objects.get(id=order_id)
            if payment_status == 'paid':
                order.is_paid = True
                order.status = 'accepted'
                order.save()
            else:
                order.status = 'cancelled'
                order.save()

            return Response(status=status.HTTP_200_OK)
        except Order.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)