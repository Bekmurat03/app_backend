# orders/views.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

import logging
import traceback
import requests
import base64
from datetime import timedelta

from django.conf import settings
from django.db import transaction
from django.shortcuts import get_object_or_404
from django.utils import timezone

from rest_framework import generics, permissions, status
from rest_framework.response import Response
from rest_framework.views import APIView
from . import services as order_services
from .models import Order
from .permissions import IsClientOwnerOfOrder, IsRestaurantOwnerOfOrder
from .serializers import OrderSerializer, OrderCreateSerializer
from payments.models import PaymentCard # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
from payments.services import PayLinkService # üëà –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å
from rest_framework.exceptions import ValidationError

from core.models import Address, User # üëà –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º User
from rest_framework.exceptions import ValidationError, APIException

logger = logging.getLogger(__name__)


# --- VIEWS –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê ---

class OrderListCreateView(generics.ListCreateAPIView):
    permission_classes = [permissions.IsAuthenticated]

    def get_serializer_class(self):
        if self.request.method == 'POST':
            return OrderCreateSerializer
        return OrderSerializer

    def get_queryset(self):
        return Order.objects.filter(user=self.request.user).select_related(
            'restaurant'
        ).prefetch_related(
            'items__menu'
        ).order_by('-created_at')

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        items_data = serializer.validated_data['items']
        address_id = serializer.validated_data['address_id']
        comment = serializer.validated_data.get('comment', '')

        try:
            order = order_services.create_order_with_calculations(request.user, items_data, address_id, comment)
            
            card = PaymentCard.objects.filter(user=request.user, is_primary=True).first()
            if not card:
                raise ValidationError("–£ –≤–∞—Å –Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
            
            payment_service = PayLinkService()
            payment_service.authorize_payment(order, card)

            full_serializer = OrderSerializer(order)
            return Response(full_serializer.data, status=status.HTTP_201_CREATED)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)

class OrderDetailView(generics.RetrieveAPIView):
    """
    –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞: –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
    """
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated, IsClientOwnerOfOrder]
    queryset = Order.objects.select_related('restaurant').prefetch_related('items__menu').all()


class CancelOrderView(APIView):
    """
    –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞: –æ—Ç–º–µ–Ω–∞ —Å–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞.
    """
    permission_classes = [permissions.IsAuthenticated, IsClientOwnerOfOrder]

    @transaction.atomic
    def post(self, request, order_id):
        order = get_object_or_404(Order.objects.select_for_update(), id=order_id)
        self.check_object_permissions(request, order)

        if order.status == 'pending':
            order.status = 'cancelled'
            order.save(update_fields=['status'])
            
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç
            if order.is_paid and order.payment_id:
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –≤—ã–∑–æ–≤ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ–π (—á–µ—Ä–µ–∑ Celery)
                # –ó–¥–µ—Å—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é.
                refund_successful = self._refund_payment(order)
                if not refund_successful:
                    # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è, –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ {order.id}")
                    # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ 'cancellation_requested' –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
            return Response({'status': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω'}, status=status.HTTP_200_OK)

        return Response({'error': '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.'}, status=status.HTTP_400_BAD_REQUEST)

    def _refund_payment(self, order):
        """ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞. """
        # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç RefundPaymentView, –≤ –∏–¥–µ–∞–ª–µ –µ–µ –Ω—É–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π
        headers = {"Authorization": f"Bearer {settings.PAYLINK_API_SECRET}"}
        payload = {"amount": int(order.total_price * 100)}
        try:
            response = requests.post(
                f"https://api.paylink.kz/api/v1/payments/{order.payment_id}/refund",
                json=payload, headers=headers, timeout=10
            )
            return response.status_code == 200
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ PayLink –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}: {str(e)}")
            return False

# --- VIEWS –î–õ–Ø –†–ï–°–¢–û–†–ê–ù–ê ---

class RestaurantOrderListView(generics.ListAPIView):
    """
    –î–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∫ –Ω–µ–º—É –æ—Ç–Ω–æ—Å—è—Ç—Å—è.
    """
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        if not hasattr(self.request.user, 'restaurants') or not self.request.user.restaurants.exists():
            return Order.objects.none()
        restaurant = self.request.user.restaurants.first()
        return Order.objects.filter(restaurant=restaurant).select_related('user').prefetch_related('items__menu').order_by('-created_at')


class RestaurantManageOrderView(APIView):
    """
    –ï–¥–∏–Ω—ã–π view –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º.
    """
    permission_classes = [permissions.IsAuthenticated, IsRestaurantOwnerOfOrder]

    @transaction.atomic
    def post(self, request, order_id):
        order = get_object_or_404(Order.objects.select_for_update(), id=order_id)
        self.check_object_permissions(request, order)

        action = request.data.get('action')
        
        # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π) ...

        order.save()
        serializer = OrderSerializer(order)
        return Response(serializer.data, status=status.HTTP_200_OK)


# --- VIEWS –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ï–ô ---

class CreatePaymentView(APIView):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ PayLink.
    """
    permission_classes = [permissions.IsAuthenticated, IsClientOwnerOfOrder]

    def post(self, request, pk):
        order = get_object_or_404(Order, id=pk)
        self.check_object_permissions(request, order)

        if order.is_paid:
            return Response({'error': '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω.'}, status=status.HTTP_400_BAD_REQUEST)

        # –°—É–º–º–∞ –≤ —Ç–∏—ã–Ω–∞—Ö, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –º–Ω–æ–≥–∏—Ö —à–ª—é–∑–æ–≤ - 100 —Ç–≥ (10000 —Ç–∏—ã–Ω)
        amount_in_tiyn = max(int(order.total_price * 100), 10000) 
        credentials = f"{settings.PAYLINK_API_KEY}:{settings.PAYLINK_API_SECRET}"
        encoded_credentials = base64.b64encode(credentials.encode()).decode()
        headers = {
            "Authorization": f"Basic {encoded_credentials}",
            "Content-Type": "application/json",
            "X-API-Version": "2"
        }

        payload = {
            "checkout": {
                "transaction_type": "payment",
                "order": {
                    "id": str(order.id), # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—à ID –∑–∞–∫–∞–∑–∞
                    "amount": amount_in_tiyn,
                    "currency": "KZT",
                    "description": f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.code} –≤ JetFood"
                },
                "settings": {
                    "success_url": "jetfood://payment/success",
                    "failure_url": "jetfood://payment/failure"
                },
                # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è payload –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞) ...
            }
        }
        
        try:
            response = requests.post("https://checkout.paylink.kz/ctp/api/checkouts", json=payload, headers=headers, timeout=15)
            response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –ø–ª–æ—Ö–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ (4xx, 5xx)
            response_data = response.json()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –µ–≥–æ —Å –∑–∞–∫–∞–∑–æ–º
            order.payment_id = response_data.get('id')
            order.save(update_fields=['payment_id'])
            
            return Response({"payment_url": response_data['checkout']['redirect_url']})
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ PayLink –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}: {str(e)}")
            return Response({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class PayLinkWebhookView(APIView):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤–µ–±—Ö—É–∫–∏) –æ—Ç PayLink."""
    permission_classes = [permissions.AllowAny]

    @transaction.atomic
    def post(self, request, *args, **kwargs):
        data = request.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç PayLink: {data}")
        
        transaction_data = data.get('transaction', {})
        payment_status = transaction_data.get('status')
        order_id_str = transaction_data.get('tracking_id') # –ò—Å–ø–æ–ª—å–∑—É–µ–º tracking_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        
        if payment_status != 'successful':
            return Response(status=status.HTTP_200_OK)

        # –†–ê–ó–î–ï–õ–Ø–ï–ú –õ–û–ì–ò–ö–£ –ü–û –ù–ê–õ–ò–ß–ò–Æ –î–ê–ù–ù–´–• –ö–ê–†–¢–´
        if 'credit_card' in transaction_data and transaction_data['credit_card'].get('token'):
            # –≠—Ç–æ –≤–µ–±—Ö—É–∫ –æ—Ç –º–∏–∫—Ä–æ-–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
            try:
                service = PayLinkService()
                service.process_tokenization_webhook(data)
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏: {traceback.format_exc()}")
        elif order_id_str:
            # –≠—Ç–æ –≤–µ–±—Ö—É–∫ –æ—Ç –æ–ø–ª–∞—Ç—ã –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            self.handle_payment_webhook(data, order_id_str)
        
        return Response({"status": "ok, webhook processed"}, status=status.HTTP_200_OK)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def handle_payment_webhook(self, data: dict, order_id: str):
        try:
            order = Order.objects.select_for_update().get(id=order_id)
            if order.is_paid:
                return

            order.is_paid = True
            order.payment_id = data.get('uid')
            if order.status == 'pending':
                order.status = 'accepted'
            
            order.save(update_fields=['is_paid', 'payment_id', 'status'])
        except Order.DoesNotExist:
            logger.error(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å ID {order_id}.")


class RefundPaymentView(APIView):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ PayLink.
    """
    permission_classes = [permissions.IsAuthenticated] # –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

    def post(self, request, pk):
        order = get_object_or_404(Order, id=pk)
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç)

        if not order.is_paid or not order.payment_id:
            return Response({'error': '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç ID –ø–ª–∞—Ç–µ–∂–∞.'}, status=status.HTTP_400_BAD_REQUEST)

        headers = {"Authorization": f"Bearer {settings.PAYLINK_API_SECRET}"}
        payload = {"amount": int(order.total_price * 100)}

        try:
            response = requests.post(f"https://api.paylink.kz/api/v1/payments/{order.payment_id}/refund", json=payload, headers=headers, timeout=10)
            response.raise_for_status()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
            order.status = 'cancelled'
            order.save(update_fields=['status'])
            
            return Response({'success': True, 'message': '–í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.'})
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ PayLink –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}: {str(e)}")
            return Response({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø–ª–∞—Ç–µ–∂–∞.'}, status=response.status_code if 'response' in locals() else 500)
class PayOrderView(APIView):
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ —Å –ø–æ–º–æ—â—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã."""
    permission_classes = [permissions.IsAuthenticated, IsClientOwnerOfOrder]

    def post(self, request, pk):
        order = get_object_or_404(Order, id=pk)
        self.check_object_permissions(request, order) # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if order.is_paid:
            return Response({'error': '–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω.'}, status=status.HTTP_400_BAD_REQUEST)

        card_id = request.data.get('card_id')
        if not card_id:
            return Response({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (card_id).'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            card = get_object_or_404(PaymentCard, id=card_id, user=request.user)
        except PaymentCard.DoesNotExist:
             return Response({'error': '–£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.'}, status=status.HTTP_404_NOT_FOUND)

        service = PayLinkService()
        try:
            payment_data = service.charge_saved_card(order, card)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            serializer = OrderSerializer(order)
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ {order.id} –∫–∞—Ä—Ç–æ–π {card.id}: {str(e)}")
            return Response({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."}, status=status.HTTP_400_BAD_REQUEST)
class CalculateOrderTotalsView(APIView):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ë–ï–ó –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è."""
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        serializer = OrderCreateSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        items_data = serializer.validated_data['items']
        address_id = serializer.validated_data['address_id']
        try:
            address_obj = get_object_or_404(Address, id=address_id, user=request.user)
            totals = order_services.calculate_order_totals(items_data, address_obj)
            return Response(totals, status=status.HTTP_200_OK)
        except ValidationError as e:
            return Response({"error": e.detail[0] if isinstance(e.detail, list) else str(e.detail)}, status=status.HTTP_400_BAD_REQUEST)


class CreateOrderView(APIView):
    """
    –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞: 1. –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ —Å–æ –≤—Å–µ–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏. 2. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.
    """
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        serializer = OrderCreateSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        items_data = serializer.validated_data['items']
        address_id = serializer.validated_data['address_id']
        card_id = serializer.validated_data.get('card_id')
        comment = serializer.validated_data.get('comment', '')

        if not card_id:
            return Response({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã."}, status=status.HTTP_400_BAD_REQUEST)

        try:
            with transaction.atomic():
                order = order_services.create_order_with_calculations(request.user, items_data, address_id, comment)
                card = get_object_or_404(PaymentCard, id=card_id, user=request.user)
                payment_service = PayLinkService()
                payment_data = payment_service.create_payment_url_for_order(order, card)

            response_data = OrderSerializer(order).data
            response_data['payment_info'] = payment_data
            return Response(response_data, status=status.HTTP_201_CREATED)

        except ValidationError as e:
            return Response({"error": e.detail[0] if isinstance(e.detail, list) else str(e.detail)},
                            status=status.HTTP_400_BAD_REQUEST)
        except APIException as e:
            return Response({"error": f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e.detail}"}, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {traceback.format_exc()}")
            return Response({"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."},
                            status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class CreateAndPayOrderView(APIView):
    """
    –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞: 1. –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑. 2. –°—Ä–∞–∑—É –∂–µ –ø—Ä–æ–≤–æ–¥–∏—Ç –æ–ø–ª–∞—Ç—É –∏ —Å–ø–ª–∏—Ç–æ–≤–∞–Ω–∏–µ.
    """
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        serializer = OrderCreateSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        items_data = serializer.validated_data['items']
        address_id = serializer.validated_data['address_id']
        card_id = serializer.validated_data.get('card_id')
        comment = serializer.validated_data.get('comment', '')

        if not card_id:
            return Response({"error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã."}, status=status.HTTP_400_BAD_REQUEST)

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            with transaction.atomic():
                order = order_services.create_order_with_calculations(request.user, items_data, address_id, comment)
                card = get_object_or_404(PaymentCard, id=card_id, user=request.user)
                payment_service = PayLinkService()
                payment_service.charge_and_split_payment(order, card)

            full_serializer = OrderSerializer(order)
            return Response(full_serializer.data, status=status.HTTP_201_CREATED)

        except ValidationError as e:
            return Response({"error": e.detail[0] if isinstance(e.detail, list) else str(e.detail)}, status=status.HTTP_400_BAD_REQUEST)
        except APIException as e:
            return Response({"error": f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e.detail}"}, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞: {traceback.format_exc()}")
            return Response({"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

