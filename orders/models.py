import uuid
from django.db import models
from django.conf import settings


class Order(models.Model):
    STATUS_CHOICES = [
        ('pending', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'),
        ('accepted', '–ü—Ä–∏–Ω—è—Ç'),
        ('preparing', '–ì–æ—Ç–æ–≤–∏—Ç—Å—è'),
        ('ready_for_pickup', '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ'),
        ('on_the_way', '–í –ø—É—Ç–∏'),
        ('delivered', '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'),
        ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω'),
    ]
    PAYMENT_METHOD_CHOICES = [('card_online', '–ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω'), ('cash', '–ù–∞–ª–∏—á–Ω—ã–º–∏')]

    code = models.CharField(max_length=20, unique=True, blank=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='orders')
    restaurant = models.ForeignKey('restaurants.Restaurant', on_delete=models.SET_NULL, null=True,
                                   related_name='orders')
    courier = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True,
                                related_name='deliveries')
    address = models.TextField()
    delivery_lat = models.DecimalField(max_digits=9, decimal_places=6, null=True, blank=True)
    delivery_lon = models.DecimalField(max_digits=9, decimal_places=6, null=True, blank=True)
    comment = models.TextField(blank=True, default='')

    # --- –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–õ–Ø ---
    items_total_price = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–°—É–º–º–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º")
    delivery_fee = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏")
    service_fee = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä")
    total_price = models.DecimalField(max_digits=10, decimal_places=2, default=0,
                                      verbose_name="–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ")

    platform_fee = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–ü—Ä–∏–±—ã–ª—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
    restaurant_payout = models.DecimalField(max_digits=10, decimal_places=2, default=0,
                                            verbose_name="–í—ã–ø–ª–∞—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É")
    courier_payout = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–í—ã–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä—É")

    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    created_at = models.DateTimeField(auto_now_add=True)
    payment_method = models.CharField(max_length=20, choices=PAYMENT_METHOD_CHOICES, default='card_online')
    is_paid = models.BooleanField(default=False)

    # üëá –ù–û–í–´–ï –ü–û–õ–Ø –¥–ª—è Robokassa
    payment_invoice_id = models.IntegerField(null=True, blank=True, verbose_name="ID —Å—á–µ—Ç–∞ –≤ Robokassa")
    authorization_id = models.CharField(max_length=255, blank=True, null=True,
                                        verbose_name="ID –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ö–æ–ª–¥–∏—Ä–æ–≤–∞–Ω–∏—è)")

    def save(self, *args, **kwargs):
        if not self.code:
            self.code = f"JET-{str(uuid.uuid4()).split('-')[-1].upper()}"
        super().save(*args, **kwargs)

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ {self.code}"

    class Meta:
        ordering = ['-created_at']


class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')
    menu = models.ForeignKey('menu.Dish', on_delete=models.SET_NULL, null=True)
    quantity = models.PositiveIntegerField(default=1)
    price_at_time_of_order = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return f"{self.quantity} x {self.menu.name if self.menu else '–£–¥–∞–ª–µ–Ω–Ω–æ–µ –±–ª—é–¥–æ'}"