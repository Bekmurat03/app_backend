from django.db import models
from django.contrib.auth import get_user_model
from restaurants.models import Restaurant
from menu.models import Dish
import random

User = get_user_model()

ORDER_STATUS_CHOICES = [
    ('pending', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'),
    ('accepted', '–ü—Ä–∏–Ω—è—Ç'),
    ('preparing', '–ì–æ—Ç–æ–≤–∏—Ç—Å—è'),
    ('on_the_way', '–í –ø—É—Ç–∏'),
    ('delivered', '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'),
    ('cancelled', '–û—Ç–º–µ–Ω—ë–Ω'),
]

def generate_order_code():
    while True:
        code = f"{random.randint(0, 999):03d}-{random.randint(0, 999):03d}"
        if not Order.objects.filter(code=code).exists():
            return code

class Order(models.Model):
    PAYMENT_METHOD_CHOICES = [
        ('card_online', '–ö–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω'),
        # ('cash', '–ù–∞–ª–∏—á–Ω—ã–º–∏'), # –£–±–∏—Ä–∞–µ–º –Ω–∞–ª–∏—á–Ω—ã–µ
    ]
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="orders")
    restaurant = models.ForeignKey(Restaurant, on_delete=models.CASCADE, related_name="orders", null=True, blank=True)

    code = models.CharField(max_length=10, unique=True, blank=True)  # –ö–æ–¥ –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123-456)
    address = models.CharField(max_length=255)
    comment = models.TextField(blank=True, null=True)
    total_price = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    status = models.CharField(max_length=20, choices=ORDER_STATUS_CHOICES, default='pending')
    created_at = models.DateTimeField(auto_now_add=True)
    courier = models.ForeignKey(
        User, 
        on_delete=models.SET_NULL, # –ï—Å–ª–∏ –∫—É—Ä—å–µ—Ä–∞ —É–¥–∞–ª—è—Ç, –∑–∞–∫–∞–∑ –Ω–µ —É–¥–∞–ª–∏—Ç—Å—è
        related_name="deliveries", 
        null=True, 
        blank=True
    )
     # üëáüëáüëá –î–û–ë–ê–í–¨–¢–ï –≠–¢–ò –ü–û–õ–Ø üëáüëáüëá
    preparation_time = models.PositiveSmallIntegerField(
        null=True, blank=True, verbose_name="–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ (–º–∏–Ω)"
    )
    estimated_delivery_time = models.DateTimeField(
        null=True, blank=True, verbose_name="–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏"
    )
    # üëÜüëÜüëÜ –ö–û–ù–ï–¶ –ù–û–í–´–• –ü–û–õ–ï–ô üëÜüëÜüëÜ
    payment_method = models.CharField(
        max_length=20, 
        choices=PAYMENT_METHOD_CHOICES, 
        default='card_online', 
        verbose_name="–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
    )
    payment_id = models.CharField(
        max_length=255, blank=True, null=True, verbose_name="ID –ø–ª–∞—Ç–µ–∂–∞ PayLink"
    )
    is_paid = models.BooleanField(default=False, verbose_name="–û–ø–ª–∞—á–µ–Ω")
    
    delivery_lat = models.FloatField(null=True, blank=True, verbose_name="–®–∏—Ä–æ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
    delivery_lon = models.FloatField(null=True, blank=True, verbose_name="–î–æ–ª–≥–æ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
    delivery_fee = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name="–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏")
    def save(self, *args, **kwargs):
        if not self.code:
            self.code = generate_order_code()
        super().save(*args, **kwargs)

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ {self.code or self.id} –æ—Ç {self.user.phone}"

class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name="items")
    menu = models.ForeignKey(Dish, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    price_at_time_of_order = models.DecimalField(
        max_digits=10, decimal_places=2, default=0, verbose_name="–¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞"
    )
    def __str__(self):
        return f"{self.quantity} x {self.menu.name}"
