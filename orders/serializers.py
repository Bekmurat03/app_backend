# orders/serializers.py

from django.db import transaction
from rest_framework import serializers
from .models import Order, OrderItem
from menu.models import Dish
from core.models import Address
from restaurants.serializers import RestaurantSerializer
from menu.serializers import DishSerializer
from .services import calculate_delivery_fee

class OrderItemSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è –û–î–ù–û–ì–û —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ."""
    menu = DishSerializer(read_only=True)

    class Meta:
        model = OrderItem
        fields = ['id', 'menu', 'quantity', 'price_at_time_of_order']


class CreateOrderSerializer(serializers.Serializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ü–†–ò–ï–ú–ê –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –°–û–ó–î–ê–ù–ò–Ø –∑–∞–∫–∞–∑–∞ —Å–æ –≤—Å–µ–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏.
    """
    items = serializers.ListField(
        child=serializers.DictField(child=serializers.IntegerField()), write_only=True, required=True
    )
    address_id = serializers.IntegerField(write_only=True, required=True)
    comment = serializers.CharField(required=False, allow_blank=True, write_only=True)
    promo_code = serializers.CharField(required=False, allow_blank=True, write_only=True)

    def validate_items(self, items):
        if not items:
            raise serializers.ValidationError("–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        restaurant_id = None
        for item_data in items:
            dish_id = item_data.get('dish_id')
            if not dish_id:
                raise serializers.ValidationError("–ö–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'dish_id'.")
            
            dish = Dish.objects.filter(id=dish_id).first()
            if not dish:
                raise serializers.ValidationError(f"–ë–ª—é–¥–æ —Å ID {dish_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
            if restaurant_id is None:
                restaurant_id = dish.restaurant.id
            elif restaurant_id != dish.restaurant.id:
                raise serializers.ValidationError("–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.")
        return items

    def create(self, validated_data):
        """
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –≤—ã–∑—ã–≤–∞—è —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏.
        """
        items_data = validated_data.pop('items')
        address_id = validated_data.pop('address_id')
        promo_code_str = validated_data.pop('promo_code', None)
        user = self.context['request'].user

        try:
            address = Address.objects.get(id=address_id, user=user)
        except Address.DoesNotExist:
            raise serializers.ValidationError("–£–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")

        first_dish_id = items_data[0]['dish_id']
        restaurant = Dish.objects.get(id=first_dish_id).restaurant

        with transaction.atomic():
            # –°–æ–∑–¥–∞–µ–º —Å–∞–º –∑–∞–∫–∞–∑
            order = Order.objects.create(
                user=user,
                restaurant=restaurant,
                address_text=f"{address.city}, {address.street}, {address.house_number}",
                delivery_lat=address.latitude,
                delivery_lon=address.longitude,
                **validated_data
            )

            # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –∏ —Å—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Ç–æ–≤–∞—Ä–æ–≤
            items_total_price = Decimal(0)
            order_items_to_create = []
            for item_data in items_data:
                dish = Dish.objects.get(id=item_data['dish_id'])
                price = dish.price
                quantity = item_data['quantity']
                items_total_price += price * quantity
                order_items_to_create.append(
                    OrderItem(order=order, dish=dish, quantity=quantity, price_at_time_of_order=price)
                )
            
            OrderItem.objects.bulk_create(order_items_to_create)

            # --- –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–û–í ---
            discount = Decimal(0)
            if promo_code_str:
                try:
                    promo = PromoCode.objects.get(code__iexact=promo_code_str)
                    if promo.is_valid():
                        discount = promo.calculate_discount(items_total_price) 
                        order.promo_code = promo
                except PromoCode.DoesNotExist:
                    pass
            
            # üëá 2. –í–´–ó–´–í–ê–ï–ú –°–ï–†–í–ò–° –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ì–û –†–ê–°–ß–ï–¢–ê –î–û–°–¢–ê–í–ö–ò
            delivery_fee = calculate_delivery_fee(restaurant, address)
            
            # üëá 3. –†–ê–°–ß–ï–¢ –°–ï–†–í–ò–°–ù–û–ì–û –°–ë–û–†–ê (–∏–∑ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏)
            service_fee = max(
                Decimal(settings.MIN_CLIENT_SERVICE_FEE),
                min(
                    items_total_price * (Decimal(settings.CLIENT_SERVICE_FEE_PERCENT) / 100),
                    Decimal(settings.MAX_CLIENT_SERVICE_FEE)
                )
            )

            # üëá 4. –†–ê–°–ß–ï–¢ –í–´–ü–õ–ê–¢ –ò –ö–û–ú–ò–°–°–ò–ô (–∏–∑ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏)
            platform_commission = items_total_price * (Decimal(settings.RESTAURANT_COMMISSION_PERCENT) / 100)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_price = items_total_price + delivery_fee + service_fee - discount

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑
            order.items_total_price = items_total_price
            order.delivery_fee = delivery_fee
            order.service_fee = service_fee
            order.discount_amount = discount
            order.total_price = total_price
            order.platform_fee = platform_commission + service_fee
            order.restaurant_payout = items_total_price - platform_commission
            order.courier_payout = delivery_fee
            order.save()

        return order

class OrderSerializer(serializers.ModelSerializer):
    """–ü–æ–ª–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ."""
    items = OrderItemSerializer(many=True, read_only=True)
    restaurant = RestaurantSerializer(read_only=True)
    user = serializers.StringRelatedField(read_only=True)

    class Meta:
        model = Order
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —ç—Ç–∏ –ø–æ–ª—è –µ—Å—Ç—å –≤ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ Order
        fields = [
            'id', 'code', 'address_text', 'comment', 'items_total_price',
            'delivery_fee', 'service_fee', 'discount_amount', 'total_price', 'platform_fee',
            'restaurant_payout', 'courier_payout', 'status', 'created_at',
            'is_paid', 'restaurant', 'items', 'user'
        ]

class OrderDetailSerializer(OrderSerializer):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –Ω–∞—Å–ª–µ–¥—É–µ—Ç –≤—Å–µ –æ—Ç OrderSerializer."""

    class Meta(OrderSerializer.Meta):
        pass